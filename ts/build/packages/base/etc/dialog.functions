# Window Manager dialogs

x_check_status()
{
	if is_enabled $SHOW_ERROR_REPORT; then
		if [ $STATUS != 0 ] && [ $STATUS != $USER_DISCONNECT_CODE ] && [ $STATUS != $USER_LOGOUT_CODE ] && [ ! -e /etc/console/$PACKAGE ]; then
			Xdialog --title $PACKAGE \
				--ok-label "View Log" \
				--cancel-label "OK" \
				--icon /lib/pixmaps/${PACKAGE}_32x32.xpm \
				--yesno "Application $PACKAGE failed with an error ($STATUS)\nWould you like to review the command output log?" 10 80

			if [ $? == 0 ]; then
				Xdialog --title $PACKAGE \
				--ok-label "Done" \
				--no-cancel \
				--logbox $APPLOG 40 100
			fi
		fi
	fi
}

check_reconnect()
{
	if [ -e /tmp/.X11-unix/X$DISPLAY_NUMBER ] ; then
		prompt=$(make_caps $RECONNECT_PROMPT | cut -c1-4)
		NO_SESSION=$(make_lower $NO_SESSION)
		if [ "$prompt" = "MENU" ] ; then
			prompt_time=$(make_caps $RECONNECT_PROMPT | cut -c5-)
			if [ -n "$prompt_time" ] ; then
				kill_time=$(date +%M)
				let kill_time=kill_time+prompt_time+1
				if [ $kill_time -gt 59 ] ; then
					let kill_time=kill_time-60
				fi
				echo "$kill_time  * * * * $NO_SESSION" >> /tmp/shutdown
				crontab /tmp/shutdown
			fi
			unset choice_error
			while [ "$choice_error" != "0" ] ; do
				choice=$(Xdialog	--stdout \
							--title "Reconnect/Shutdown?" \
							--clear \
							--no-cancel \
							--combobox "Choose option then OK to continue." 10 60 Reconnect Shutdown)
				choice_error=$?
			done
			if [ "$choice" = "Shutdown" ] ; then
				shutdown
			elif [ -e /tmp/shutdown ] ; then
				crontab /tmp/crontab
				rm /tmp/shutdown
				reconnect=0
			fi
		elif [ "$prompt" = "AUTO" ] ; then
			prompt_time=$(make_caps $RECONNECT_PROMPT | cut -c5-)
			if [ -z "$prompt_time" ] ; then
				prompt_time=10
			fi
			Xdialog --title "No Server Response" \
				--clear \
				--timeout $prompt_time \
				--msgbox "Server not responding - waiting $prompt_time seconds" 10 60
			reconnect=0
		elif [ "$prompt" == "FORC" ]; then
			reconnect=0
		elif [ "$prompt" != "OFF" ] ; then
			Xdialog --title "Reconnect?" \
				--clear \
				--yesno "Click yes to reconnect." 10 60
			reconnect=$?
		else
			reconnect=1
		fi
	fi
}

confirm_exit()
{
	Xdialog --title "Logout" --clear --yesno "Click yes to Confirm Exit?" 10 60
}

dialog_no_value()
{
	Xdialog --title "$1 Client" \
		--clear \
		--msgbox "You must enter value, aborted" 10 60 10000
}

dialog_get_value()
{
	Xdialog --title "$1 Client" \
		--clear \
		--inputbox "Enter $2:" 10 60 2>&1 1>/dev/null \
	|grep -Ev '&|;|\(|`'
}

read_options()
{
	if $GET_USER; then
		if [ -n "$REMUSER" ]; then
			echo "$REMUSER" > /tmp/.dialog_${client}_user
		fi

		if [ -z "$REMUSER" ] || $GET_PASSWORD; then
			SHOW_USER=true
		fi
	fi
	if $CMD_GETIP; then
		if [ -n "$SERVER" ]; then
			echo "$SERVER" > /tmp/.dialog_${client}_server
		else
			ALLOW_SERVER_EDITS=true
		fi

		if is_enabled $ALWAYS_ENTER_SERVER; then
			ALLOW_SERVER_EDITS=true
		fi

		if [ -n "$OPTIONS" ]; then
			echo "$OPTIONS" > /tmp/.dialog_${client}_options
		fi
	fi
	if [ -e /tmp/.dialog_${client}_user ]; then
		DIALOG_USER=$(cat /tmp/.dialog_${client}_user)
	fi
	if [ -e /tmp/.dialog_${client}_server ]; then
		DIALOG_SERVER=$(cat /tmp/.dialog_${client}_server)
	fi
	if [ -e /tmp/.dialog_${client}_options ]; then
		DIALOG_OPTIONS=$(cat /tmp/.dialog_${client}_options)
	fi
	if [ -z "$DIALOG_SERVER" ]; then
		DIALOG_SERVER="type server name here"
	fi
	if [ -z $ALLOW_SERVER_EDITS ]; then
		ALLOW_SERVER_EDITS=false
	fi
	if [ -z $SHOW_USER ]; then
		SHOW_USER=false
	fi
	if [ -z $DIALOG_TITLE ]; then
		DIALOG_TITLE=$client
	fi
	if [ "$CMD_FULLSCREEN" != "$CMD_WINDOW" ] && [ "$mode" == "window" -o "$mode" == "fullscreen" ]; then
		WINDOWED_SELECTABLE=true
		if [ "$mode" == "window" ]; then
			windowed_default=true
		else
			windowed_default=false
		fi
	else
		WINDOWED_SELECTABLE=false
		windowed_default=false
	fi
	if $GET_PASSWORD && $GET_USER && [ -n "$DIALOG_USER" ]; then
			USER_FOCUS=false
			PASS_FOCUS=true
	else
		USER_FOCUS=true
		PASS_FOCUS=false
	fi
}

set_default()
{
	if [ -n "$1" ]; then
		echo "<default>$@</default>"
	fi
}

choose_pixmap()
{
	if [ -e /lib/icons/hicolor/32x32/apps/$client.png ]; then
		echo "/lib/icons/hicolor/32x32/apps/$client.png"
	else
		echo "/lib/pixmaps/${client}_32x32.xpm"
	fi
}

dialog_no_value()
{
		Xdialog --title "$1 Client" \
			--clear \
			--msgbox "You must enter value for $2." 10 60 10000
}

create_dialog()
{
	MAIN_DIALOG='
<window title="'"$DIALOG_TITLE"'" decorated="true" width-request="325" height-request="205" allow-grow="false" allow-shrink="false" skip_taskbar_hint="true" image-name="'$(choose_pixmap)'">
	<vbox>
	<notebook labels="User|Server">
		<vbox visible="'"$SHOW_USER"'">
			<text space-expand="false" space-fill="false" use-markup="true" xalign="0">
				<label>Username</label>
			</text>
			<entry activates_default="true" has-focus="'$USER_FOCUS'">
				'$(set_default $DIALOG_USER)'
				<variable>DIALOG_USER</variable>
				<input>echo "$DIALOG_USER" |sed -e "s|[\&\;\`\(\)\|]||g"</input>
				<action signal="focus-out-event">refresh:DIALOG_USER</action>
			</entry>
			<text visible="'"$GET_PASSWORD"'" space-expand="false" space-fill="false" use-markup="true" xalign="0">
				<label>Password</label>
			</text>
			<entry visible="'"$GET_PASSWORD"'" visibility="false" caps-lock-warning="true" has-focus="'$PASS_FOCUS'" activates_default="true">
				<variable>DIALOG_PASSWORD</variable>
			</entry>
		</vbox>
		<vbox visible="'"$ALLOW_SERVER_EDITS"'">
			<text space-expand="false" space-fill="false" use-markup="true" xalign="0">
				<label>Server name or IP number</label>
			</text>
			<entry activates_default="true" editable="'"$ALLOW_SERVER_EDITS"'" has-focus="true">
				'$(set_default $DIALOG_SERVER)'
				<variable>DIALOG_SERVER</variable>
				<input>echo "$DIALOG_SERVER" |sed -e "s|[\&\;\`\(\)\|]||g"</input>
				<action signal="focus-out-event">refresh:DIALOG_SERVER</action>
			</entry>
			<text space-expand="false" space-fill="false" use-markup="true" xalign="0">
				<label>Options</label>
			</text>
			<entry activates_default="true" editable="'"$ALLOW_SERVER_EDITS"'">
				'$(set_default $DIALOG_OPTIONS)'
				<variable>DIALOG_OPTIONS</variable>
				<input>echo "$DIALOG_OPTIONS" |sed -e "s|[\&\;\`\(\)\|]||g"</input>
				<action signal="focus-out-event">refresh:DIALOG_OPTIONS</action>
			</entry>
		</vbox>
	</notebook>
	<vseparator height-request="5"></vseparator>
		<hbox>
			<checkbox visible="'"$WINDOWED_SELECTABLE"'">
				<label>Windowed</label>
				<variable>windowed</variable>
				<default>'$windowed_default'</default>
			</checkbox>
			<hbox>
				<button>
					<label>"Exit"</label>
					<action>EXIT:abort</action>
				</button>
				<button can-default="true" has-default="true">
					<label>"Connect"</label>
					<action>EXIT:ok</action>
				</button>
			</hbox>
		</hbox>
	</vbox>
</window>
'
}

run_dialog()
{
	I=$IFS; IFS=""
	for STATEMENTS in  $(gtkdialog -c --program=MAIN_DIALOG); do
		eval $STATEMENTS
	done
	IFS=$I
}

parse_results()
{
	if [ "$EXIT" == "ok" ]; then
		# preserve settings
		echo "$DIALOG_USER" > /tmp/.dialog_${client}_user
		echo "$DIALOG_SERVER" > /tmp/.dialog_${client}_server
		echo "$DIALOG_OPTIONS" > /tmp/.dialog_${client}_options
		if [ "$DIALOG_SERVER" != "type server name here" ]; then
			REMUSER="$DIALOG_USER"
			PASSWORD="$DIALOG_PASSWORD"
			SERVER="$DIALOG_SERVER"
			OPTIONS="$DIALOG_OPTIONS"
		fi
		if $WINDOWED_SELECTABLE && $windowed; then
			MODE=WINDOW
		fi
	elif is_enabled $ALLOW_EXIT ; then
		exit
	fi
}

check_results()
{
	if $GET_USER && [ -z "$SERVER" ] && [ -z "$REMUSER" ]; then
		dialog_no_value $client "Username and Server"
	elif [ -z "$SERVER" ]; then
		dialog_no_value $client "Server name or IP"
	elif $GET_USER && [ -z "$REMUSER" ]; then
		dialog_no_value $client "Username"
	else
		notcomplete=false
	fi
	if $notcomplete; then
		unset PASSWORD
	fi
}

dialog_get_server_address()
{
	GTKDIALOG=gtkdialog
	client=$1
	notcomplete=true
	while $notcomplete; do
		read_options
		if $SHOW_USER || $ALLOW_SERVER_EDITS; then
			create_dialog
			export MAIN_DIALOG
			run_dialog
			parse_results
			check_results
		else
			notcomplete=false
		fi
	done
}

gen_text_widget()
{
	cat <<EOF
	<text use-markup="true" justify="2" space-expand="true" space-fill="true" wrap="true" width-chars="40">
		<label>"$1"</label>
	</text>
EOF
}

net_progress()
{
	let chunksize="99 / $PACKAGE_NET_WAIT"
	progress=".    "
	for i in $(seq 99 -$chunksize 0); do
		if [ -z "`ifconfig |grep -e 'inet addr' |grep -v 127.0`" ]; then
			echo $i
			echo "Scanning$progress"
			if	[ "$progress" == ".    " ]; then progress="..   "
			elif	[ "$progress" == "..   " ]; then progress="...  "
			elif	[ "$progress" == "...  " ]; then progress=".... "
			elif	[ "$progress" == ".... " ]; then progress="....."
			elif	[ "$progress" == "....." ]; then progress=".    "
			fi
			sleep 1
		fi
	done
	echo 100 Done
}

x_error()
{
	title="$1"
	shift
	while [ -n "$1" ]; do
		local text_widget="$text_widget `gen_text_widget \"$1\"`"
		shift
	done
	export MAIN_DIALOG='
<window title="'$title'" decorated="false" resizable="false">
	<vbox>
		<hseparator></hseparator>
		<hbox>
			<pixmap icon_size="6">
				<input file stock="gtk-dialog-error" has-focus="true"></input>
			</pixmap>
			<vbox>
				'$text_widget'
				<vseparator height-request="5"></vseparator>
			</vbox>
		</hbox>
		<hseparator></hseparator>
		<hbox>
			<button has-focus="false" can-focus="false">
				<label>"Exit"</label>
					<action>EXIT:ok</action>
			</button>
		</hbox>
	</vbox>
</window>
'
	result=`$GTKDIALOG`
	exit 1
}

find_network()
{
	if is_disabled $NETWORK_REQUIRED; then
		return 0
	fi
	export -f net_progress
	export BAR_DIALOG='
<window title="Kiosk Progress" decorated="false" width-request="325" height-request="95" allow-grow="false" allow-shrink="false" skip_taskbar_hint="true">
	<vbox>
		<text>
			<label>Waiting for '$PACKAGE' network.</label>
		</text>
		<vseparator height-request="5"></vseparator>
		<progressbar>
			<variable>PROGRESS_BAR</variable>
			<label>Some Text</label>
			<input>bash -c net_progress</input>
			<action function="refresh">ENTRY</action>
			<action function="closewindow">BAR_DIALOG</action>
			<action>echo ready</action>
		</progressbar>
	</vbox>
	<variable>BAR_DIALOG</variable>
</window>
'
	[ -z $GTKDIALOG ] && GTKDIALOG=gtkdialog
	if [ -z "`ifconfig |grep -e 'inet addr' |grep -v 127.0`" ]; then
		export PACKAGE_NET_WAIT
		$GTKDIALOG --program=BAR_DIALOG
	fi
	if [ -z "`ifconfig |grep -e 'inet addr' |grep -v 127.0`" ]; then
		x_error "Network" "Timed out waiting for network!"
		return 1
	fi
}
